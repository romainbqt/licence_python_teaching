#+TITLE:  _=matplotlib=_ : librairie pour la représentation graphique
#+AUTHOR: Xavier Garrido
#+DATE:   25/02/2017
#+OPTIONS: toc:nil ^:{} author:nil
#+STARTUP:     beamer
#+LATEX_CLASS: python-slide

* =matplotlib= ?

#+ATTR_BEAMER: :overlay +-
- La librairie =matplotlib= est *la* bibliothèque graphique de Python

- Étroitement liée à =numpy= et =scipy=

- Grande variété de *format de sortie (=png=, =pdf=, =svg=, =eps=, =pgf=)*
  ainsi que support de *\LaTeX* pour le texte

- /Graphical User Interface/ pour l'exploration interactive des figures (zoom,
  sélection,...)

- Tous les aspects d'une figure (taille, position,...) peuvent être contrôlés
  d'un point de vue /programmatique/ \to *reproductibilité* des figures et des
  résultats scientifiques

* Installation & importation de =matplotlib=

#+ATTR_BEAMER: :overlay +-
- Installation /via/ =pip=
  #+BEAMER: \vskip5pt
  #+BEGIN_SRC shell-session
    $ pip install matplotlib
  #+END_SRC

- Convention d'importation
  #+BEAMER: \vskip5pt
  #+BEGIN_SRC python
    In [1]: import matplotlib as mpl
    In [2]: import matplotlib.pyplot as plt
  #+END_SRC

* Comment afficher vos figures : =show()= or not =show()=

#+BEAMER: \setbeamercovered{invisible}

- Affichage depuis un script python
  #+BEAMER: \vskip5pt
  #+BEGIN_SRC python -n
    import matplotlib.pyplot as plt
    import numpy as np

    x = np.linspace(0, 3*np.pi, 100)

    plt.plot(x, np.sin(x))
    plt.plot(x, np.cos(x))

    plt.show()
  #+END_SRC

  #+BEAMER: \pause

  #+BEGIN_SRC latex
    \begin{tikzpicture}[remember picture,overlay]
      \tikzset{codeblock/.style={color=#1!50,rounded corners=0.5ex, opacity=0.2, fill}}
      \draw[codeblock=blue] (3ex,0.75ex) rectangle (13ex,3ex);
      \node[blue] (t) [xshift=40ex, yshift=+4ex] {\small Utilisation de \texttt{\bf plt.show()}};
      \draw[->, blue] (t.west) to [out=180, in=0] (14ex, 1.5ex);
    \end{tikzpicture}
  #+END_SRC

* Comment afficher vos figures : =show()= or not =show()=

#+BEAMER: \setbeamercovered{invisible}

- Affichage depuis la console =ipython=
  #+BEAMER: \vskip5pt
  #+BEGIN_SRC python -n
    In [1]: %matplotlib
    Using matplotlib backend: TkAgg

    In [2]: import matplotlib.pyplot as plt
    In [3]: import numpy as np

    In [4]: x = np.linspace(0, 3*np.pi, 100)

    In [6]: plt.plot(x, np.sin(x))
    In [7]: plt.plot(x, np.cos(x))
  #+END_SRC

  #+BEAMER: \pause

  #+BEGIN_SRC latex
    \begin{tikzpicture}[remember picture,overlay]
      \tikzset{codeblock/.style={color=#1!50,rounded corners=0.5ex, opacity=0.2, fill}}
      \draw[codeblock=blue] (10ex,18.75ex) rectangle (20ex,21ex);
      \node[blue] (t) [xshift=50ex, yshift=+18ex] {\small Utilisation de \texttt{\bf \%matplotlib}};
      \draw[->, blue] (t.west) to [out=180, in=0] (21ex, 20ex);
    \end{tikzpicture}
  #+END_SRC

- Possibilité également de lancer la commande =ipython= avec l'option =--matplotlib=

* Première figure sous =matplotlib=
** Python code
:PROPERTIES:
:BEAMER_COL: 0.52
:END:

#+BEGIN_SRC python
  In [1]: %matplotlib
  In [2]: import matplotlib.pyplot as plt
  In [3]: import numpy as np

  In [4]: x = np.linspace(0, 3*np.pi, 100)

  In [5]: plt.plot(x, np.sin(x))
  In [6]: plt.plot(x, np.cos(x))
#+END_SRC

#+BEAMER: \pause
- Sauvegarder la figure (=eps=, =pdf=, =png=)

#+BEGIN_SRC python
  In [7]: plt.savefig("/tmp/mpl1.pdf")
#+END_SRC

** Figure
:PROPERTIES:
:BEAMER_COL: 0.5
:END:

#+ATTR_LATEX: :width 1.1\linewidth
[[file:figures/mpl.pdf]]

* /Kozmetix/ sous =matplotlib=
#+BEAMER: \framesubtitle{Lignes, marqueurs : styles \& couleurs}
** Python code
:PROPERTIES:
:BEAMER_COL: 0.52
:END:

#+BEAMER: \small

#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [8]: plt.plot(x, x + 0, linestyle="solid")
#+END_SRC
#+BEAMER: \pause\vskip-1pt
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [9]: plt.plot(x, x + 1, linestyle="dashed")
#+END_SRC
#+BEAMER: \pause\vskip-1pt
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In[10]: plt.plot(x, x + 2, linestyle="dashdot")
#+END_SRC
#+BEAMER: \pause\vskip-1pt
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In[11]: plt.plot(x, x + 3, linestyle="dotted")
#+END_SRC

- Il est également possible d'utiliser les notations raccourcies

  | =-=  | \equiv | =solid=   |
  | =--= | \equiv | =dashed=  |
  | =-.= | \equiv | =dashdot= |
  | =:=  | \equiv | =dotted=  |

** Figure
:PROPERTIES:
:BEAMER_COL: 0.5
:END:

#+BEGIN_SRC latex
  \begin{center}
    \includegraphics<1>[width=1.1\linewidth]{figures/mpl_line0.pdf}
    \includegraphics<2>[width=1.1\linewidth]{figures/mpl_line1.pdf}
    \includegraphics<3>[width=1.1\linewidth]{figures/mpl_line2.pdf}
    \includegraphics<4>[width=1.1\linewidth]{figures/mpl_line3.pdf}
  \end{center}
#+END_SRC
* /Kozmetix/ sous =matplotlib=
#+BEAMER: \framesubtitle{Lignes, marqueurs : styles \& couleurs}
** Python code
:PROPERTIES:
:BEAMER_COL: 0.52
:END:

#+BEAMER: \small

#+ATTR_BEAMER: :overlay +-
- En spécifiant le nom de la couleur
  #+ATTR_LATEX: :options fontsize=\scriptsize
  #+BEGIN_SRC python
    In [8]: plt.plot(x, np.sin(x - 0), color="blue")
  #+END_SRC

- Nom raccourci (=rgbcmyk=)
  #+ATTR_LATEX: :options fontsize=\scriptsize
  #+BEGIN_SRC python
    In [9]: plt.plot(x, np.sin(x - 1), color="g")
  #+END_SRC

- Échelle de gris =[0; 1]=
  #+ATTR_LATEX: :options fontsize=\scriptsize
  #+BEGIN_SRC python
    In[10]: plt.plot(x, np.sin(x - 2), color="0.75")
  #+END_SRC

- Code héxadécimal (=RRGGBB=)
  #+ATTR_LATEX: :options fontsize=\scriptsize
  #+BEGIN_SRC python
    In[11]: plt.plot(x, np.sin(x - 3),
                     color="#FFDD44")
  #+END_SRC

- RGB /tuple/ =[0; 1]=
  #+ATTR_LATEX: :options fontsize=\scriptsize
  #+BEGIN_SRC python
    In[12]: plt.plot(x, np.sin(x - 4),
                     color=(1.0,0.2,0.3))
  #+END_SRC

** Figure
:PROPERTIES:
:BEAMER_COL: 0.5
:END:

#+BEGIN_SRC latex
  \begin{center}
    \includegraphics<1>[width=1.1\linewidth]{figures/mpl_color0.pdf}
    \includegraphics<2>[width=1.1\linewidth]{figures/mpl_color1.pdf}
    \includegraphics<3>[width=1.1\linewidth]{figures/mpl_color2.pdf}
    \includegraphics<4>[width=1.1\linewidth]{figures/mpl_color3.pdf}
    \includegraphics<5>[width=1.1\linewidth]{figures/mpl_color4.pdf}
  \end{center}
#+END_SRC

* /Kozmetix/ sous =matplotlib=
#+BEAMER: \framesubtitle{Lignes, marqueurs : styles \& couleurs}
** Python code
:PROPERTIES:
:BEAMER_COL: 0.52
:END:

#+BEAMER: \small\vskip+17pt
#+BEGIN_SRC python
  In [4]: x = np.linspace(0, 3*np.pi, 30)
  In [5]: plt.plot(x, np.sin(x), "o")
#+END_SRC

#+BEAMER: \pause\vskip-1pt
#+BEGIN_SRC python
  In [6]: plt.plot(x, np.sin(x), "p",
     ...:          markersize=15,
     ...:          markerfacecolor='pink',
     ...:          markeredgecolor='gray',
     ...:          markeredgewidth=2)
#+END_SRC

** Figure
:PROPERTIES:
:BEAMER_COL: 0.5
:END:

#+BEGIN_SRC latex
  \begin{center}
    \includegraphics<1>[width=1.1\linewidth]{figures/mpl_marker0.pdf}
    \includegraphics<2>[width=1.1\linewidth]{figures/mpl_marker1.pdf}
  \end{center}
#+END_SRC
* /Kozmetix/ sous =matplotlib=
#+BEAMER: \framesubtitle{Lignes, marqueurs : styles \& couleurs}

#+BEGIN_SRC latex
  \begin{center}
    \includegraphics[width=0.6\linewidth]{figures/mpl_marker2.pdf}
  \end{center}
#+END_SRC

#+BEGIN_SRC python
  In [7]: for marker in ["o", ".", ",", "x", "+", "v", "^", "<", ">", "s", "d"]:
    ...:     plt.plot(np.random.rand(10), np.random.rand(10), marker)
#+END_SRC

* /Kozmetix/ sous =matplotlib=
#+BEAMER: \framesubtitle{Lignes, marqueurs : styles \& couleurs}
** Python code
:PROPERTIES:
:BEAMER_COL: 0.52
:END:

#+BEAMER: \small
- Il est finalement possible de combiner style & couleur au sein d'une syntaxe
  minimaliste

  #+BEGIN_SRC python
    In [8]: plt.plot(x, x + 0, "-og")
  #+END_SRC
  #+BEAMER: \pause\vskip-3pt
  #+BEGIN_SRC python
    In [9]: plt.plot(x, x + 1, "--xc")
  #+END_SRC
  #+BEAMER: \pause\vskip-3pt
  #+BEGIN_SRC python
    In[10]: plt.plot(x, x + 2, "-..k")
  #+END_SRC
  #+BEAMER: \pause\vskip-3pt
  #+BEGIN_SRC python
    In[11]: plt.plot(x, x + 3, ":sr")
  #+END_SRC

- Pour découvrir l'ensemble des options d'affichage *=plt.plot?=* ou
  *=help(plt.plot)=*

** Figure
:PROPERTIES:
:BEAMER_COL: 0.5
:END:

#+BEGIN_SRC latex
  \begin{center}
    \includegraphics<1>[width=1.1\linewidth]{figures/mpl_colorline0.pdf}
    \includegraphics<2>[width=1.1\linewidth]{figures/mpl_colorline1.pdf}
    \includegraphics<3>[width=1.1\linewidth]{figures/mpl_colorline2.pdf}
    \includegraphics<4-5>[width=1.1\linewidth]{figures/mpl_colorline3.pdf}
  \end{center}
#+END_SRC

* /Kozmetix/ sous =matplotlib=
#+BEAMER: \framesubtitle{Définition des limites \& \emph{ticks}}

** Figure
:PROPERTIES:
:BEAMER_COL: 0.5
:END:

#+BEGIN_SRC latex
  \begin{center}
    \includegraphics<1>[width=1.1\linewidth]{figures/mpl_limit0.pdf}
    \includegraphics<2>[width=1.1\linewidth]{figures/mpl_limit1.pdf}
    \includegraphics<3>[width=1.1\linewidth]{figures/mpl_limit2.pdf}
    \includegraphics<4-5>[width=1.1\linewidth]{figures/mpl_limit3.pdf}
  \end{center}
#+END_SRC

** Python code
:PROPERTIES:
:BEAMER_COL: 0.52
:END:

#+BEAMER: \small\vskip+17pt
#+BEGIN_SRC python
  In [4]: x = np.linspace(0, 3*np.pi, 100)
  In [5]: plt.plot(x, np.sin(x))

  In [6]: plt.xlim(-1, 11)
  In [7]: plt.ylim(-1.5, 1.5)
#+END_SRC

#+BEAMER: \pause\vskip-1pt
#+BEGIN_SRC python
  In [8]: plt.axis([11, -1, 1.5, -1.5])
#+END_SRC

#+BEAMER: \pause\vskip-1pt
#+BEGIN_SRC python
  In [9]: plt.axis("tight")
#+END_SRC

#+BEAMER: \pause\vskip-1pt
#+BEGIN_SRC python
  In[10]: plt.axis("equal")
#+END_SRC

#+BEAMER: \pause
- Pour découvrir l'ensemble des options d'affichage *=plt.axis?=* ou
  *=help(plt.axis)=*

* /Kozmetix/ sous =matplotlib=
#+BEAMER: \framesubtitle{Définition des limites \& \emph{ticks}}

#+BEGIN_SRC latex
  \begin{center}
    \includegraphics<1>[width=0.6\linewidth]{figures/mpl_ticks0.pdf}
    \includegraphics<2>[width=0.6\linewidth]{figures/mpl_ticks1.pdf}
  \end{center}
#+END_SRC

#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In[11]: plt.xticks([0, np.pi/2, np.pi, 3*np.pi/2, 2*np.pi, 5*np.pi/2, 3*np.pi])
  In[12]: plt.yticks([-1, 0, +1])
#+END_SRC

#+BEAMER: \pause\vskip-1pt
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In[13]: plt.xticks([0, np.pi/2, np.pi, 3*np.pi/2, 2*np.pi, 5*np.pi/2, 3*np.pi],
                     [r"$0$", r"$\pi/2$", r"$\pi$", r"$3\pi/2$", r"$2\pi", r"$5\pi/2$", r"$3\pi$"])
#+END_SRC

* /Kozmetix/ sous =matplotlib=
#+BEAMER: \framesubtitle{Définition des limites \& \emph{ticks}}

#+BEGIN_SRC latex
  \begin{center}
    \includegraphics<1>[width=0.6\linewidth]{figures/mpl_ticks1.pdf}
  \end{center}
#+END_SRC

#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In[11]: plt.xticks([0, np.pi/2, np.pi, 3*np.pi/2, 2*np.pi, 5*np.pi/2, 3*np.pi])
  In[12]: plt.yticks([-1, 0, +1])
#+END_SRC

#+BEAMER: \vskip-1pt
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In[13]: plt.xticks([0, np.pi/2, np.pi, 3*np.pi/2, 2*np.pi, 5*np.pi/2, 3*np.pi],
                     [r"$0$", r"$\pi/2$", r"$\pi$", r"$3\pi/2$", r"$2\pi", r"$5\pi/2$", r"$3\pi$"])
#+END_SRC

#+ATTR_LATEX: :options [5][lbtuc][\centering][10][8]
#+BEGIN_CBOX
#+BEGIN_REMARK
Le prefixe =r= pour /raw-text/ indique que la chaîne de caractères doit être traiter
sans échapper les caractères précédés de =\=
#+END_REMARK
#+END_CBOX

* /Kozmetix/ sous =matplotlib=
#+BEAMER: \framesubtitle{Définition des limites \& \emph{ticks}}

** Figure
:PROPERTIES:
:BEAMER_COL: 0.5
:END:

#+BEGIN_SRC latex
  \begin{center}
    \includegraphics<1>[width=1.1\linewidth]{figures/mpl_axis0.pdf}
    \includegraphics<2>[width=1.1\linewidth]{figures/mpl_axis1.pdf}
    \includegraphics<3>[width=1.1\linewidth]{figures/mpl_axis2.pdf}
    \includegraphics<4>[width=1.1\linewidth]{figures/mpl_axis3.pdf}
  \end{center}
#+END_SRC

** Python code
:PROPERTIES:
:BEAMER_COL: 0.52
:END:

#+BEAMER: \small\vskip+17pt
- Accéder aux axes de la figure (=gca= \equiv =get current axis=)

#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [4]: ax = plt.gca()
  In [5]: ax.grid()
#+END_SRC

#+BEAMER: \pause\vskip-1pt
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [6]: ax.spines["right"].set_color("none")
#+END_SRC

#+BEAMER: \pause\vskip-1pt
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [7]: ax.spines["top"].set_color("none")
#+END_SRC

#+BEAMER: \pause\vskip-1pt
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [8]: ax.spines["bottom"].set_position(("data",0))
#+END_SRC

* /Kozmetix/ sous =matplotlib=
#+BEAMER: \framesubtitle{\emph{Labelling} : titre, axes, légendes et autres annotations}

** Figure
:PROPERTIES:
:BEAMER_COL: 0.5
:END:

#+BEGIN_SRC latex
  \begin{center}
    \includegraphics<1->[width=1.1\linewidth]{figures/mpl_title.pdf}
  \end{center}
#+END_SRC

** Python code
:PROPERTIES:
:BEAMER_COL: 0.52
:END:

#+BEAMER: \small\vskip+17pt
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [4]: x = np.linspace(0, 3*np.pi, 100)
  In [5]: plt.plot(x, np.sin(x))

  In [6]: plt.title("Variation de la fonction sinus")
  In [7]: plt.xlabel(r"$\theta$")
  In [8]: plt.ylabel(r"$\cos\theta$")
#+END_SRC

* /Kozmetix/ sous =matplotlib=
#+BEAMER: \framesubtitle{\emph{Labelling} : titre, axes, légendes et autres annotations}
** Figure
:PROPERTIES:
:BEAMER_COL: 0.5
:END:

#+BEGIN_SRC latex
  \begin{center}
    \includegraphics<1>[width=1.1\linewidth]{figures/mpl_legend0.pdf}
    \includegraphics<2>[width=1.1\linewidth]{figures/mpl_legend1.pdf}
    \includegraphics<3->[width=1.1\linewidth]{figures/mpl_legend2.pdf}
  \end{center}
#+END_SRC

** Python code
:PROPERTIES:
:BEAMER_COL: 0.52
:END:

#+BEAMER: \small\vskip+17pt
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [4]: x = np.linspace(0, 3*np.pi, 100)
  In [5]: plt.plot(x, np.sin(x), label=r"$\sin\theta$")
  In [6]: plt.plot(x, np.cos(x), label=r"$\cos\theta$")
  In [7]: plt.axis("equal")

  In [8]: plt.legend()
#+END_SRC

#+BEAMER: \pause\vskip-1pt
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [9]: plt.legend(loc="upper left", frameon=False)
#+END_SRC

#+BEAMER: \pause\vskip-1pt
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In[10]: plt.legend(loc="lower center", frameon=False,
                     ncol=2)
#+END_SRC

#+BEAMER: \pause
- Pour découvrir l'ensemble des options d'affichage *=plt.legend?=* ou
  *=help(plt.legend)=*

* /Kozmetix/ sous =matplotlib=
#+BEAMER: \framesubtitle{\emph{Labelling} : titre, axes, légendes et autres annotations}

#+BEGIN_SRC latex
  \begin{center}
    \includegraphics<1>[width=0.6\linewidth]{figures/mpl_text0.pdf}
    \includegraphics<2>[width=0.6\linewidth]{figures/mpl_text1.pdf}
  \end{center}
#+END_SRC

#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In[11]: plt.text(0, 3, "Matplotlib rocks !")
#+END_SRC

#+BEAMER: \pause\vskip-1pt
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In[12]: plt.annotate(r"$\cos\left(\frac{\pi}{2}\right)=0$",
                       xy=(np.pi/2, np.cos(np.pi/2)), xytext=(3, 2),
                       arrowprops=dict(arrowstyle="->", connectionstyle="arc3,rad=.2"))
#+END_SRC

* /Scatter plot/

** Figure
:PROPERTIES:
:BEAMER_COL: 0.5
:END:

#+BEGIN_SRC latex
  \begin{center}
    \includegraphics<1>[width=1.1\linewidth]{figures/mpl_scatter0.pdf}
    \includegraphics<2>[width=1.1\linewidth]{figures/mpl_scatter1.pdf}
  \end{center}
#+END_SRC

** Python code
:PROPERTIES:
:BEAMER_COL: 0.52
:END:

#+BEAMER: \vskip+17pt
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [1]: x = np.linspace(0, 3*np.pi, 30)
  In [2]: plt.scatter(x, np.sin(x), marker="o")
#+END_SRC

#+BEAMER: \pause\vskip-1pt
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [3]: plt.plot(x, np.cos(x), "o", color="orange")
#+END_SRC

* /Scatter plot/

- Le mode /scatter/ permet de contrôler (taille, couleur) chaque point/marqueur
  individuellement

** Figure
:PROPERTIES:
:BEAMER_COL: 0.5
:END:

#+BEGIN_SRC latex
  \begin{center}
    \includegraphics<1>[width=1.1\linewidth]{figures/mpl_scatter2.pdf}
  \end{center}
#+END_SRC

** Python code
:PROPERTIES:
:BEAMER_COL: 0.52
:END:

#+BEAMER: \vskip+17pt
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [1]: rng = np.random
  In [2]: x = rng.randn(100)
  In [3]: y = rng.randn(100)
  In [4]: colors = rng.rand(100)
  In [5]: sizes = 1000 * rng.rand(100)

  In [6]: plt.grid()
  In [7]: plt.scatter(x, y, c=colors, s=sizes, alpha=0.3,
                      cmap="viridis")
  In [8]: plt.colorbar()
#+END_SRC
* Barres d'erreur
** Python code
:PROPERTIES:
:BEAMER_COL: 0.52
:END:

#+BEAMER: \vskip+17pt
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [1]: x = np.linspace(0, 10, 50)
  In [2]: dy = 0.8
  In [3]: y = np.sin(x) + dy * np.random.randn(50)

  In [4]: plt.errorbar(x, y, yerr=dy, fmt="o")
  In [5]: plt.plot(x, np.sin(x))
#+END_SRC

#+BEAMER: \pause\vskip-1pt
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [6]: plt.errorbar(x, y, yerr=dy,
                       fmt="o", color="black",
                       ecolor="lightgray",
                       elinewidth=3,
                       capsize=0)
#+END_SRC

#+BEAMER: \pause\vskip-1pt
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [7]: plt.fill_between(x, np.sin(x)-dy, np.sin(x)+dy,
                           alpha=0.2, color="gray")
#+END_SRC

** Figure
:PROPERTIES:
:BEAMER_COL: 0.5
:END:

#+BEGIN_SRC latex
  \begin{center}
    \includegraphics<1>[width=1.1\linewidth]{figures/mpl_errorbar0.pdf}
    \includegraphics<2>[width=1.1\linewidth]{figures/mpl_errorbar1.pdf}
    \includegraphics<3>[width=1.1\linewidth]{figures/mpl_errorbar2.pdf}
  \end{center}
#+END_SRC

* Histogramme 1D
** Python code
:PROPERTIES:
:BEAMER_COL: 0.52
:END:

#+BEAMER: \vskip+17pt
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [1]: data = np.random.randn(1000)
  In [2]: plt.hist(data)
#+END_SRC

#+BEAMER: \pause\vskip-1pt
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [3]: plt.hist(data, bins=30, normed=True)
#+END_SRC

- Pour découvrir l'ensemble des options d'affichage *=plt.hist?=* ou
  *=help(plt.hist)=*

** Figure
:PROPERTIES:
:BEAMER_COL: 0.5
:END:

#+BEGIN_SRC latex
  \begin{center}
    \includegraphics<1>[width=1.1\linewidth]{figures/mpl_histogram0.pdf}
    \includegraphics<2>[width=1.1\linewidth]{figures/mpl_histogram1.pdf}
  \end{center}
#+END_SRC

* Histogramme 1D
** Python code
:PROPERTIES:
:BEAMER_COL: 0.52
:END:

#+BEAMER: \vskip+17pt
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [0]: x1 = np.random.normal(0, 0.8, 1000)
  In [1]: x2 = np.random.normal(-2, 1, 1000)
  In [2]: x3 = np.random.normal(3, 2, 1000)

  In [3]: kwargs = dict(histtype="stepfilled", alpha=0.5,
                        normed=True, bins=40)

  In [4]: plt.hist(x1, **kwargs)
  In [5]: plt.hist(x2, **kwargs)
  In [6]: plt.hist(x3, **kwargs);
#+END_SRC

** Figure
:PROPERTIES:
:BEAMER_COL: 0.5
:END:

#+BEGIN_SRC latex
  \begin{center}
    \includegraphics<1>[width=1.1\linewidth]{figures/mpl_histogram2.pdf}
  \end{center}
#+END_SRC
* Histogramme 2D
** Python code
:PROPERTIES:
:BEAMER_COL: 0.52
:END:

#+BEAMER: \vskip+17pt
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [1]: mean = [0, 0]
  In [2]: cov = [[1, 1], [1, 2]]
  In [3]: x, y = np.random.multivariate_normal(mean, cov, 10000).T

  In [4]: plt.hist2d(x, y, bins=30, cmap="Blues")
  In [5]: plt.colorbar()
#+END_SRC

** Figure
:PROPERTIES:
:BEAMER_COL: 0.5
:END:

#+BEGIN_SRC latex
  \begin{center}
    \includegraphics<1>[width=1.1\linewidth]{figures/mpl_histogram3.pdf}
  \end{center}
#+END_SRC
* Contours & densités

#+BEGIN_SRC latex
  \begin{align*}
    z = f(x,y) =& \sin^{10} x + \cos(x\cdot y)\cdot\cos x\\
    =&\sin^{10}\begin{bmatrix}
    x_0&\cdots
    \end{bmatrix}+\cos\left(\begin{bmatrix}
        x_0&\cdots
      \end{bmatrix}\cdot\begin{bmatrix}
    y_0\\\vdots\end{bmatrix}\right)\cdot\cos\begin{bmatrix}
        x_0&\cdots
      \end{bmatrix}
  \end{align*}
#+END_SRC

#+BEAMER: \vskip-20pt
*** Python code
:PROPERTIES:
:BEAMER_COL: 0.55
:END:

#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [1]: def f(x, y):
     ...:     return np.sin(x)**10 + np.cos(x*y) * np.cos(x)

  In [2]: x = np.linspace(0, 5, 500)
  In [3]: y = np.linspace(0, 5, 500)

  In [4]: X, Y = np.meshgrid(x, y)
  In [5]: Z = f(X, Y)

  In [6]: contours = plt.contour(X, Y, Z, 3, colors='black')
  In [7]: plt.clabel(contours, inline=True, fontsize=8)

  In [8]: plt.imshow(Z, extent=[0, 5, 0, 5], origin='lower',
                     cmap='RdGy', alpha=0.5)
  In [9]: plt.colorbar();
#+END_SRC

*** Color map
:PROPERTIES:
:BEAMER_COL: 0.55
:END:

#+BEAMER: \visible<2>{
#+ATTR_LATEX: :width 1.1\linewidth
[[file:figures/mpl_contour.pdf]]
#+BEAMER: }
