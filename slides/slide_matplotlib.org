#+TITLE:  _=matplotlib=_ : librairie pour la représentation graphique
#+AUTHOR: Xavier Garrido
#+DATE:   25/02/2017
#+OPTIONS: toc:nil ^:{} author:nil
#+STARTUP:     beamer
#+LATEX_CLASS: python-slide

* =matplotlib= ?

#+ATTR_BEAMER: :overlay +-
- La librairie =matplotlib= est *la* bibliothèque graphique de Python

- Forte intéraction avec =numpy= et =scipy=

- Grande variété de *format de sortie (=png=, =pdf=, =svg=, =eps=, =pgf=)*
  ainsi que support de *\LaTeX* pour le texte

- /Graphical User Interface/ pour l'exploration interactive des figures (zoom,
  sélection,...)

- Tous les aspects d'une figure (taille, position,...) peuvent être contrôlés
  d'un point de vue /programmatique/ \to *reproductibilité* des figures et des
  résultats scientifiques

* Installation & importation de =matplotlib=

#+ATTR_BEAMER: :overlay +-
- Installation /via/ =pip=
  #+BEAMER: \vskip5pt
  #+BEGIN_SRC shell-session
    $ pip install matplotlib
  #+END_SRC

- Convention d'importation
  #+BEAMER: \vskip5pt
  #+BEGIN_SRC python
    In [1]: import matplotlib as mpl
    In [2]: import matplotlib.pyplot as plt
  #+END_SRC

* Comment afficher vos figures : =show()= or not =show()=

#+BEAMER: \setbeamercovered{invisible}

- Affichage depuis un script python
  #+BEAMER: \vskip5pt
  #+BEGIN_SRC python -n
    import matplotlib.pyplot as plt
    import numpy as np

    x = np.linspace(0, 3*np.pi, 100)

    plt.plot(x, np.sin(x))
    plt.plot(x, np.cos(x))

    plt.show()
  #+END_SRC

  #+BEAMER: \pause

  #+BEGIN_SRC latex
    \begin{tikzpicture}[remember picture,overlay]
      \tikzset{codeblock/.style={color=#1!50,rounded corners=0.5ex, opacity=0.2, fill}}
      \draw[codeblock=blue] (3ex,0.75ex) rectangle (13ex,3ex);
      \node[blue] (t) [xshift=40ex, yshift=+4ex] {\small Utilisation de \texttt{\bf plt.show()}};
      \draw[->, blue] (t.west) to [out=180, in=0] (14ex, 1.5ex);
    \end{tikzpicture}
  #+END_SRC

* Comment afficher vos figures : =show()= or not =show()=

#+BEAMER: \setbeamercovered{invisible}

- Affichage depuis la console =ipython=
  #+BEAMER: \vskip5pt
  #+BEGIN_SRC python -n
    In [1]: %matplotlib
    Using matplotlib backend: TkAgg

    In [2]: import matplotlib.pyplot as plt
    In [3]: import numpy as np

    In [4]: x = np.linspace(0, 3*np.pi, 100)

    In [6]: plt.plot(x, np.sin(x))
    In [7]: plt.plot(x, np.cos(x))
  #+END_SRC

  #+BEAMER: \pause

  #+BEGIN_SRC latex
    \begin{tikzpicture}[remember picture,overlay]
      \tikzset{codeblock/.style={color=#1!50,rounded corners=0.5ex, opacity=0.2, fill}}
      \draw[codeblock=blue] (10ex,18.75ex) rectangle (20ex,21ex);
      \node[blue] (t) [xshift=50ex, yshift=+18ex] {\small Utilisation de \texttt{\bf \%matplotlib}};
      \draw[->, blue] (t.west) to [out=180, in=0] (21ex, 20ex);
    \end{tikzpicture}
  #+END_SRC

- Possibilité également de lancer la commande =ipython= avec l'option =--matplotlib=

* Première figure sous =matplotlib=

** Python code
:PROPERTIES:
:BEAMER_COL: 0.52
:END:

#+BEGIN_SRC python
  In [1]: %matplotlib
  In [2]: import matplotlib.pyplot as plt
  In [3]: import numpy as np

  In [4]: x = np.linspace(0, 3*np.pi, 100)

  In [5]: plt.plot(x, np.sin(x))
  In [6]: plt.plot(x, np.cos(x))
#+END_SRC

#+BEAMER: \pause
- Sauvegarder la figure (=eps=, =pdf=, =png=)

#+BEGIN_SRC python
  In [7]: plt.savefig("/tmp/mpl1.pdf")
#+END_SRC

** Figure
:PROPERTIES:
:BEAMER_COL: 0.5
:END:

#+ATTR_LATEX: :width 1.1\linewidth
[[file:figures/matplotlib1.pdf]]
* /Kozmetix/ sous =matplotlib=
#+BEAMER: \framesubtitle{Styles \& couleurs des lignes}

** Python code
:PROPERTIES:
:BEAMER_COL: 0.52
:END:

#+BEAMER: \small

#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [8]: plt.plot(x, x + 0, linestyle="solid")
#+END_SRC
#+BEAMER: \pause\vskip-1pt
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [9]: plt.plot(x, x + 1, linestyle="dashed")
#+END_SRC
#+BEAMER: \pause\vskip-1pt
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In[10]: plt.plot(x, x + 2, linestyle="dashdot")
#+END_SRC
#+BEAMER: \pause\vskip-1pt
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In[11]: plt.plot(x, x + 3, linestyle="dotted")
#+END_SRC

- Il est également possible d'utiliser les notations raccourcies

  | =-=  | \equiv | =solid=   |
  | =--= | \equiv | =dashed=  |
  | =-.= | \equiv | =dashdot= |
  | =:=  | \equiv | =dotted=  |

** Figure
:PROPERTIES:
:BEAMER_COL: 0.5
:END:

#+BEGIN_SRC latex
  \begin{center}
    \includegraphics<1>[width=1.1\linewidth]{figures/mpl_line0.pdf}
    \includegraphics<2>[width=1.1\linewidth]{figures/mpl_line1.pdf}
    \includegraphics<3>[width=1.1\linewidth]{figures/mpl_line2.pdf}
    \includegraphics<4>[width=1.1\linewidth]{figures/mpl_line3.pdf}
  \end{center}
#+END_SRC
* /Kozmetix/ sous =matplotlib=
#+BEAMER: \framesubtitle{Styles \& couleurs des lignes}

** Python code
:PROPERTIES:
:BEAMER_COL: 0.52
:END:

#+BEAMER: \small

#+ATTR_BEAMER: :overlay +-
- En spécifiant le nom de la couleur
  #+ATTR_LATEX: :options fontsize=\scriptsize
  #+BEGIN_SRC python
    In [8]: plt.plot(x, np.sin(x - 0), color="blue")
  #+END_SRC

- Nom raccourci (=rgbcmyk=)
  #+ATTR_LATEX: :options fontsize=\scriptsize
  #+BEGIN_SRC python
    In [9]: plt.plot(x, np.sin(x - 1), color="g")
  #+END_SRC

- Échelle de gris =[0; 1]=
  #+ATTR_LATEX: :options fontsize=\scriptsize
  #+BEGIN_SRC python
    In[10]: plt.plot(x, np.sin(x - 2), color="0.75")
  #+END_SRC

- Code héxadécimal (=RRGGBB=)
  #+ATTR_LATEX: :options fontsize=\scriptsize
  #+BEGIN_SRC python
    In[11]: plt.plot(x, np.sin(x - 3),
                     color="#FFDD44")
  #+END_SRC

- RGB /tuple/ =[0; 1]=
  #+ATTR_LATEX: :options fontsize=\scriptsize
  #+BEGIN_SRC python
    In[12]: plt.plot(x, np.sin(x - 4),
                     color=(1.0,0.2,0.3))
  #+END_SRC

** Figure
:PROPERTIES:
:BEAMER_COL: 0.5
:END:

#+BEGIN_SRC latex
  \begin{center}
    \includegraphics<1>[width=1.1\linewidth]{figures/mpl_color0.pdf}
    \includegraphics<2>[width=1.1\linewidth]{figures/mpl_color1.pdf}
    \includegraphics<3>[width=1.1\linewidth]{figures/mpl_color2.pdf}
    \includegraphics<4>[width=1.1\linewidth]{figures/mpl_color3.pdf}
    \includegraphics<5>[width=1.1\linewidth]{figures/mpl_color4.pdf}
  \end{center}
#+END_SRC
* /Kozmetix/ sous =matplotlib=
#+BEAMER: \framesubtitle{Styles \& couleurs des lignes}

** Python code
:PROPERTIES:
:BEAMER_COL: 0.52
:END:

#+BEAMER: \small
#+ATTR_LATEX: :overlay +-
- Il est finalement possible de combiner style & couleur au sein d'une syntaxe
  minimaliste

  #+ATTR_LATEX: :options fontsize=\scriptsize
  #+BEGIN_SRC python
    In [8]: plt.plot(x, x + 0, "-g")
  #+END_SRC
  #+BEAMER: \pause\vskip-3pt
  #+ATTR_LATEX: :options fontsize=\scriptsize
  #+BEGIN_SRC python
    In [9]: plt.plot(x, x + 1, "--c")
  #+END_SRC
  #+BEAMER: \pause\vskip-3pt
  #+ATTR_LATEX: :options fontsize=\scriptsize
  #+BEGIN_SRC python
    In[10]: plt.plot(x, x + 2, "-.k")
  #+END_SRC
  #+BEAMER: \pause\vskip-3pt
  #+ATTR_LATEX: :options fontsize=\scriptsize
  #+BEGIN_SRC python
    In[11]: plt.plot(x, x + 3, ":r")
  #+END_SRC

- Pour découvrir l'ensemble des options d'affichage *=plt.plot?=* ou
  *=help(plt.plot)=*


** Figure
:PROPERTIES:
:BEAMER_COL: 0.5
:END:

#+BEGIN_SRC latex
  \begin{center}
    \includegraphics<1>[width=1.1\linewidth]{figures/mpl_colorline0.pdf}
    \includegraphics<2>[width=1.1\linewidth]{figures/mpl_colorline1.pdf}
    \includegraphics<3>[width=1.1\linewidth]{figures/mpl_colorline2.pdf}
    \includegraphics<4-5>[width=1.1\linewidth]{figures/mpl_colorline3.pdf}
  \end{center}
#+END_SRC
